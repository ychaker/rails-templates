# Helper Methods
def say_custom(tag, text); say "\033[1m\033[36m" + tag.to_s.rjust(10) + "\033[0m" + "  #{text}" end

def multiple_choice(question, choices)
  say_custom('question', question)
  values = {}
  choices.each_with_index do |choice,i|
    values[(i + 1).to_s] = choice[1]
    say_custom (i + 1).to_s + ')', choice[0]
  end
  answer = ask("Enter your selection:") while !values.keys.include?(answer)
  values[answer]
end

@after_blocks = []
def after_bundler(&block); @after_blocks << block; end
@after_everything_blocks = []
def after_everything(&block); @after_everything_blocks << block; end
@before_configs = []
def before_config(&block); @before_configs << block; end

# Autoload Modules/Classes
inject_into_file 'config/application.rb', :after => 'config.autoload_paths += %W(#{config.root}/extras)' do <<-'RUBY'

    config.autoload_paths += %W(#{config.root}/lib)
RUBY
end

# Git
say "Initialize git"
remove_file '.gitignore'
file '.gitignore', <<-TEXT
#----------------------------------------------------------------------------
# Ignore these files when committing to a git repository.
#
# See http://help.github.com/ignore-files/ for more about ignoring files.
#----------------------------------------------------------------------------

# bundler state
/.bundle
/vendor/bundle/
/vendor/ruby/

# minimal Rails specific artifacts
db/*.sqlite3
/log/*
/tmp/*

# various artifacts
**.war
*.rbc
*.sassc
.rspec
.redcar/
.sass-cache
/config/config.yml
/config/database.yml
/coverage.data
/coverage/
/db/*.javadb/
/db/*.sqlite3
/doc/api/
/doc/app/
/doc/features.html
/doc/specs.html
/public/cache
/public/stylesheets/compiled
/public/system/*
/spec/tmp/*
/cache
/capybara*
/capybara-*.html
/gems
/specifications
rerun.txt
pickle-email-*.html

# If you find yourself ignoring temporary files generated by your text editor
# or operating system, you probably want to add a global ignore instead:
#   git config --global core.excludesfile ~/.gitignore_global
#
# Here are some files you may want to ignore globally:

# scm revert files
**.orig

# Mac finder artifacts
.DS_Store

# Netbeans project directory
/nbproject/

# RubyMine project files
.idea

# Textmate project files
/*.tmproj

# vim artifacts
**.swp

TEXT

git :init
git :add => '.'
git :commit => "-aqm 'Initial Commit'"


# After Everything
after_everything do
  say "Running After Everything Block"

  # remove default READMEs
  %w{
    README
    README.rdoc
    doc/README_FOR_APP
  }.each { |file| remove_file file }
end

# Gems
say 'Updating Gemfile'
remove_file 'Gemfile'
file 'Gemfile', <<-RUBY
source 'https://rubygems.org'

ruby '1.9.3'
gem 'rails', '3.2.11'

gem 'thin'

# Gems used only for assets and not required
# in production environments by default.
group :assets do
  gem 'sass-rails',   '~> 3.2.3'
  gem 'coffee-rails', '~> 3.2.1'

  gem 'uglifier', '>= 1.0.3'

  gem 'bootstrap-sass'
end

#################################
# Back end
#################################
# DB
gem 'bson_ext'
gem 'json'
gem 'mongoid'
gem 'mongoid-history', :git => 'git://github.com/aq1018/mongoid-history.git'
gem "mongo_session_store-rails3", :git => 'git://github.com/brianhempel/mongo_session_store.git', :branch => 'master'

# Validation
gem 'validates_timeliness'

# Authorization
gem 'cancan'
gem 'rolify'

# Authentication
gem 'sorcery'

# File uploading
gem 'carrierwave', :git => 'git://github.com/jnicklas/carrierwave.git', :branch => 'master'
gem 'carrierwave-mongoid', :require => 'carrierwave/mongoid'
gem 'mini_magick', '~> 3.4'
gem 'fog'
gem 'cloudfiles'

# State machine
gem 'ffi'
gem 'state_machine', :git => 'git://github.com/pluginaweek/state_machine.git'
gem 'ruby-graphviz', :require => 'graphviz'

# Money/Currency
gem 'money'

#################################
# Scalability/Business
#################################
# Monitoring
gem 'newrelic_rpm'
gem 'km'

# Exception notifier
gem 'exceptional'

# Email
gem 'hominid'

# User Feedback/Support
gem 'ezcrypto' # Uservoice dependencies


#################################
# Front End/UI
#################################
gem 'slim'

gem 'jquery-rails'

gem 'kaminari'
gem 'httparty'

# Autocomplete text field
gem 'rails3-jquery-autocomplete'

# Forms
gem 'simple_form'

# Client side validations
gem 'client_side_validations'
gem 'client_side_validations-simple_form'
gem 'client_side_validations-mongoid'

gem 'rails-boilerplate'

# Static pages
gem 'high_voltage'

# Mailchimp Integration
gem 'gibbon'

# Markdown
gem 'redcarpet'

#################################
# Other
#################################
# timeout gem to help on heroku
gem 'SystemTimer', :require => 'system_timer', :platforms => :ruby_18
gem 'rack-timeout'

# url shortner
gem 'bitly'

# follow
gem 'acts_as_follower'

group :development, :test do
  # Server
  gem 'thin'

  # Testing
  gem 'rspec-rails',        :git => 'git://github.com/rspec/rspec-rails.git'
  gem 'rspec',              :git => 'git://github.com/rspec/rspec.git'
  gem 'rspec-core',         :git => 'git://github.com/rspec/rspec-core.git'
  gem 'rspec-expectations', :git => 'git://github.com/rspec/rspec-expectations.git'
  gem 'rspec-mocks',        :git => 'git://github.com/rspec/rspec-mocks.git'
  gem 'autotest'

  gem 'capybara', :git => 'git://github.com/jnicklas/capybara'

  # heroku and multi env deployment
  gem 'heroku_san'

  gem 'mongoid-rspec'

  gem 'tddium'
end

group :development do
  gem 'tunnlr_connector', :require => 'tunnlr'
  gem 'mailcatcher'
  gem 'better_errors'
  gem 'binding_of_caller'
  gem 'meta_request'
end

group :test do
  gem 'cucumber-rails', :require => false
  # database_cleaner is not required, but highly recommended
  gem 'database_cleaner'

  gem 'fabrication'
  gem 'spork'
  gem 'launchy'   # So you can do Then show me the page

  gem 'email_spec'
end

group :production do
  gem 'unicorn'
end

RUBY
git :add => '.'
git :commit => "-aqm 'Gemfile'"

# Database
after_bundler do
  say 'Configuring Database'
  generate 'mongoid:config'
  remove_file 'config/database.yml'
  run 'bundle exec rake db:create'

  git :add => '.'
  git :commit => "-aqm 'Create Database'"
end

# Simple Form
after_bundler do
  say "Installing simple_form for use with Twitter Bootstrap"
  generate 'simple_form:install --bootstrap'

  git :add => '.'
  git :commit => "-aqm 'Initializing Simple Form'"
end

# Bundle Install
say "Installing gems. This will take a while."
run 'bundle install --without production'

# Run 'After Bundler' Callbacks
say "Running 'after bundler' callbacks."
@after_blocks.each{|b| b.call}

# Run 'After Everything' Callbacks
say "Running 'after everything' callbacks."
@after_everything_blocks.each{|b| b.call}
